name: "Terraform"

on:  
  push: 
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  Build:
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Compile
        run: |
          echo Build completed
      
      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          if-no-files-found: error
  
  Deploy2Dev:
    name: Deploy to Dev Environment
    if: github.event_name == 'pull_request'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: Dev
      url: 'https://dev.happycode.today'

    steps:
      - name: Configures AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/download-artifact@v3
        with:
          name: my-artifact
    
      - name: Display structure of downloaded files
        run: ls -R

      - name: Build Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/test-dev:latest .
          docker push ${{ steps.login-ecr.outputs.registry }}/test-dev:latest

  Deploy2Stage:
    name: Deploy to Stage
    if: github.event.ref == 'ref/heads/main'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: Stage
      url: 'https://stage.happycode.tech'

    steps:
      - name: Configures AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/download-artifact@v3
        with:
          name: my-artifact
    
      - name: Display structure of downloaded files
        run: ls -R

      - name: Build Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/test-stage:latest .
          docker push ${{ steps.login-ecr.outputs.registry }}/test-stage:latest

  Deploy2Prod:
    name: Deploy to Stage
    needs: [Deploy2Stage]
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: 'https://happycode.com'

    steps:
      - name: Configures AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/download-artifact@v3
        with:
          name: my-artifact
    
      - name: Display structure of downloaded files
        run: ls -R

      - name: Build Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/test-prod:latest .
          docker push ${{ steps.login-ecr.outputs.registry }}/test-prod:latest

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     # terraform_version: 1.4.2
      #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check

      # - name: Terraform Init
      #   id: init
      #   run: terraform init
      
      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color

      # - name: Terraform Plan
      #   id: plan
      #   if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color -input=false
      #   continue-on-error: true

      # - name: Update Pull Request
      #   uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: ${{ steps.plan.outputs.stdout }}
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`terraform\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.deployment.name_cron }}
    tags.datadoghq.com/version: {{ .Values.deployment.version }}
    tags.datadoghq.com/service: "tms-cron"
    tags.datadoghq.com/env: {{ .Values.deployment.environment }}
  name:  {{ .Values.deployment.name_cron }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.deployment.replicas }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ .Values.deployment.name_cron }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ .Values.deployment.name_cron }}
        tags.datadoghq.com/version: {{ .Values.deployment.version }}
        tags.datadoghq.com/service: "tms-cron"
        tags.datadoghq.com/env: {{ .Values.deployment.environment }}
      annotations:
        reloader.stakater.com/auto: "true"
    spec:
      volumes:
      - name: {{ .Values.pv.name }}
        persistentVolumeClaim:
          claimName: {{ .Values.pvc.name }}
      containers:
      - env:
        - name: {{ .Values.deployment.name }}
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: CRON_ENABLED
          value: "true"
        - name: SYMFONY__DB_USER
          value: {{ .Values.variables.SYMFONY__DB_USER_CRON | quote }}
        - name: SYMFONY__DB_PASSWORD
          value: {{ .Values.variables.SYMFONY__DB_PASSWORD_CRON | quote }}
        - name: DD_SERVICE
          value: "tms-cron"
        {{ include "tms.appVariables" . | nindent 8 }}
        image: {{ .Values.deployment.image }}
        imagePullPolicy: Always
        name: {{ .Values.deployment.name }}
        lifecycle:
          postStart:
            exec:
              command:
                - "bash"
                - "-c"
                - >
                  ant -f /website/build.xml prepare-container && ln -sf /website/website1/web/ /website/web && ln -sf /website/website1/vendor/friendsofsymfony1/symfony1/data/web/sf /website/web/sf;
        volumeMounts:
        - name: {{ .Values.pv.name }}
          mountPath: /website/website1/private
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            cpu: {{ .Values.deployment.cpu_limit.cron }}
            memory: {{ .Values.deployment.memory_limit.cron }}
          requests:
            cpu: {{ .Values.deployment.cpu_request.cron }}
            memory: {{ .Values.deployment.memory_request.cron }}
      nodeSelector:
        kubernetes.io/os: linux
      imagePullSecrets:
        - name : docker-secret

